1. Classe Player:

user_name :(unique) Nom du joueur.
-----------------
__init__(self, id: int, name: str) : Initialise un joueur.

3. Classe Historique:
name_player :(FK) Référence au joueur. recuperer le nom du joueur. dans une variable globale dans le main.
date : Date du QCM.
score : Score obtenu par categorie
categorie: Catégorie du QCM.
score_finale: Score final du joueur.
-----------------
__init__(self, id_player: int, date: str, score: int) : Initialise un enregistrement d'historique.



2. Classe Question:
qst : Le texte de la question.
arrayResponse : Liste des options de réponse.
correctResponse : La réponse correcte (index).
categorie : Catégorie de la question (enum).
-----------------
__init__(self, id: int, qst: str, arrayResponse: list[str], correctResponse: str, categorie: str) : Initialise une question.
verifier_reponse(self, reponse: int) -> bool : Vérifie si une réponse est correcte.
self.correctResponse == reponse
afficher_question(self) -> str : Retourne la question et les options sous forme de chaîne.



4. Propositions de fonctionnalités globales:(Ramy)

1. Gestion des Joueurs:
joueur_existe(joueurs: list[Player], name: str) -> bool : Vérifie si un joueur existe.
ajouter_joueur(joueurs: list[Player], id: int, name: str) -> Player : Ajoute un joueur à la liste.
rechercher_joueur(joueurs: list[Player], id: int) -> Player | None : Trouve un joueur par son ID.

2. Gestion des Questions:
charger_questions(fichier: str) -> list[Question] : Charge des questions depuis un fichier.
filtrer_questions(questions: list[Question], categorie: str) -> list[Question] : Retourne les questions d'une catégorie spécifique.

3. Gestion de l'Historique:
ajouter_historique(historiques: list[Historique], id_player: int, date: str, score: int) -> None : Ajoute une entrée d'historique.
afficher_historique_joueur(historiques: list[Historique], user_player: str) -> str : Affiche lhistorique d'un joueur spécifique.


5. class export player_response:(Abdou)
    user_name:
    Qst_res: arrayRes[]
    score:

